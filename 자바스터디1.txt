[ 객체와 객체지향 ]
객체지향 프로그래밍은 좀 더 나은 프로그램을 만들기 위한 프로그래밍 패러다임으로 로직을 상태와 행위로 이루어진 객체로 만드는 것이다. 
이 객체들을 마치 레고 블럭처럼 조립해서 하나의 프로그램을 만드는 것이 객체지향 프로그래밍이라고 할 수 있다. 

- 객체지향과 절차지향 프로그래밍의 차이점
절차지향 프로그래밍은 흐름도에 따라 순서대로 나열하여 프로그램을 작성한다. (ex. c언어)
객체지향은 객체들을 정의하고, 객체들의 상호 관계와 상호 작용으로 구현한다. (ex. java, c++, c#, python)

- 객체지향 프로그래밍의 장점
코드 재사용이 용이하다.
유지보수가 쉽다.
대형 프로젝트에 적합하다.

[ 클래스 ]
클래스는 어떤 집단에 속하는 속성이나 행위를 변수와 메서드로 정의한 것으로, 객체를 만드는 '틀'이라고 할 수 있다. 클래스라는 틀에서 정의된 실체가 바로 객체이다. 클래스로 객체를 찍어낼 수 있다고 생각하면 쉽다.

- 캡슐화
클래스는 '캡슐'이라고도 한다. 객체지향 프로그래밍에서는 동일한 분류의 기능과 특성의 모음을 클래스라는 캡슐에 넣고, 캡슐을 통해 데이터를 외부의 접근으로부터 보호하는데, 이를 캡슐화라고 한다. 캡슐화를 통해 코드를  재활용할 수 있게 되어 재사용성이 높아졌다.

[ Java와 JVM ]
자바는 자바로 기술된 프로그램 개발 및 실행을 할 수 있는 소프트웨어 모임의 총칭이다. 자바 프로그램은 운영체제나 하드웨어에 의존하지 않는 바이트 코드인 추상적인 코드로 구현된다. 따라서 자바 프로그램을 실행하기 위해 JVM과 개발에 필요한 표준 라이브러리 세트, 그리고 컴파일러의 환경만 맞추면 자바 프로그램은 모든 환경에서 동일하게 동작한다. 이러한 실행환경과 개발환경을 제공하는 것이 자바 플랫폼이다.
자바 플랫폼 중 하나가 바로 JVM이다. JVM은 자바 컴파일러가 변환한 .class 파일을 바이너리 코드로 변환한다. 쉽게 말해 JVM은 OS에 종속적이며, 자바 바이트 코드를 OS에 맞게 해석해주는 역할을 한다. 이러한 과정을 통해 자바는 OS에 관계 없이 사용할 수 있는 것이다.

- 바이트 코드와 바이너리 코드의 차이점
바이트 코드는 JVM 같은 가상 머신이 이해할 수 있는 코드이다. (.class)
바이너리 코드는 CPU가 이해할 수 있는 코드이다.

- 자바의 실행 과정
1) Java Compiler
==> 컴파일러를 통해 개발자가 작성한 Java 파일을 해석할 수 있도록 바이트 코드로 변경한다. 
2) Class Loader
==> 컴파일러를 통해 만든 .class 파일을 JVM 내로 로딩한다. 
3) Excution Engine
==> 로딩된 .class 파일을 명령어 단위로 해석한다. 이 때 바이트 코드인 .class 파일이 바이너리 코드로 변경된다.
4) Runtime Data Area
==> JVM이 OS 위에서 실행되면서 할당받는 메모리 영역이다.